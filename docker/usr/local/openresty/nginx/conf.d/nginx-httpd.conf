error_log syslog:server=unix:/var/log/nginx/error.sock;

# The "auto_ssl" shared dict should be defined with enough storage space to
# hold your certificate data. 5MB of storage holds certificates for
# approximately 500 separate domains.
lua_shared_dict auto_ssl 5m;

# The "auto_ssl" shared dict is used to temporarily store various settings
# like the secret used by the hook server on port 8999. Do not change or
# omit it.
lua_shared_dict auto_ssl_settings 64k;

# Initial setup tasks.
init_by_lua_block {
    auto_ssl = (require "resty.auto-ssl").new()

    auto_ssl:set("allow_domain", function(domain)
        local environment = os.getenv("ENVIRONMENT")
        if environment == "development" then
            -- Do not generate certificates when development
            return false
        else
            local redis = require "resty.redis"
            local red = redis:new()
            red:set_timeout(1000) -- 1 sec

            local project_name = os.getenv("PROJECT_NAME")
            local ok, err = red:connect(os.getenv("REDIS_PORT_6379_TCP_ADDR"), 6379)
            if not ok then
                return false
            end

            red:select(0)
            local enabled = red:sismember(project_name .. ":certificates:domain_whitelist", domain)
            if enabled == 1 then
                return true
            end
            return false
        end
    end)

    auto_ssl:set("storage_adapter", "resty.auto-ssl.storage_adapters.redis")

    auto_ssl:set("redis", {
        host = os.getenv("REDIS_PORT_6379_TCP_ADDR"),
        prefix = os.getenv("PROJECT_NAME") .. ":certificates",
        db = 0
    })

    auto_ssl:set("hook_server_port", 80)

    auto_ssl:init()
}

init_worker_by_lua_block {
    auto_ssl:init_worker()
}

access_log syslog:server=unix:/var/log/nginx/access.sock main;

server {
    listen 80 default_server;

    # Increase the body buffer size, to ensure the internal POSTs can always
    # parse the full POST contents into memory.
    client_body_buffer_size 128k;
    client_max_body_size 128k;


    # Set real ip if request forwarded from VPC (vpc-dc2d9fb9) CIDR
    set_real_ip_from 10.16.0.0/16;
    real_ip_header X-Forwarded-For;
    real_ip_recursive on;

    # Endpoint used for performing domain verification with Let's Encrypt.
    location /.well-known/acme-challenge/ {
      content_by_lua_block {
        auto_ssl:challenge_server()
      }
    }

    # load balancer health check
    location /.ping {
        return 200 "pong";
    }

    # Endpoints used for handling certificate tasks.
    location ~ ^/(deploy\-challenge|clean\-challenge|deploy\-cert) {
        content_by_lua_block {
            auto_ssl:hook_server()
        }
    }

    # redirect all other requests to https
    location / {
        return 301 https://$host$request_uri;
    }
}
