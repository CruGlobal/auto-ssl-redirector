error_log syslog:server=unix:/var/log/nginx/error.sock;

# The "auto_ssl" shared dict should be defined with enough storage space to
# hold your certificate data. 5MB of storage holds certificates for
# approximately 500 separate domains.
lua_shared_dict auto_ssl 5m;

# The "auto_ssl" shared dict is used to temporarily store various settings
# like the secret used by the hook server on port 8999. Do not change or
# omit it.
lua_shared_dict auto_ssl_settings 64k;

# Initial setup tasks.
init_by_lua_block {
    auto_ssl = (require "resty.auto-ssl").new()

    auto_ssl:set("allow_domain", function(domain)
        local environment = os.getenv("ENVIRONMENT")
        if environment == "development" then
            -- Do not generate certificates when development
            return false
        else
            local redis = require "resty.redis"
            local red = redis:new()
            red:set_timeout(1000) -- 1 sec

            local ok, err = red:connect(os.getenv("STORAGE_REDIS_HOST"), os.getenv("STORAGE_REDIS_PORT"))
            if not ok then
                return false
            end

            red:select(os.getenv("STORAGE_REDIS_DB_INDEX"))
            local enabled = red:sismember("certificates:domain_whitelist", domain)
            if enabled == 1 then
                return true
            end
            return false
        end
    end)

    auto_ssl:set("storage_adapter", "resty.auto-ssl.storage_adapters.redis")

    auto_ssl:set("redis", {
        host = os.getenv("STORAGE_REDIS_HOST"),
        port = os.getenv("STORAGE_REDIS_PORT"),
        db = os.getenv("STORAGE_REDIS_DB_INDEX"),
        prefix = "certificates"
    })

    auto_ssl:init()
}

init_worker_by_lua_block {
    auto_ssl:init_worker()
}

access_log syslog:server=unix:/var/log/nginx/access.sock main;

# HTTP non-www to www redirect
server {
    listen 80;
    server_name familylife.com storyrunners.org;

    set_by_lua $environment 'return os.getenv("ENVIRONMENT") or "development"';
    access_log syslog:server=unix:/var/log/nginx/access.sock;
    access_log /var/log/nginx/access.log json_combined;

    # Endpoint used for performing domain verification with Let's Encrypt.
    location ^~ /.well-known/acme-challenge/ {
        content_by_lua_block {
            auto_ssl:challenge_server()
        }
    }

    location / {
        return 301 https://www.$host$request_uri;
    }
}

# HTTP
server {
    listen 80 default_server;

    set_by_lua $environment 'return os.getenv("ENVIRONMENT") or "development"';
    access_log syslog:server=unix:/var/log/nginx/access.sock;
    access_log /var/log/nginx/access.log json_combined;

    # Endpoint used for performing domain verification with Let's Encrypt.
    location ^~ /.well-known/acme-challenge/ {
      content_by_lua_block {
        auto_ssl:challenge_server()
      }
    }

    # load balancer health check
    location /.ping {
        return 200 "pong";
    }

    # redirect all other requests to https
    location / {
        return 301 https://$host$request_uri;
    }
}
